{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","serviceWorkerRegistration.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robots","map","robot","i","SearchBox","onSearch","onChange","type","Scroll","style","overflow","height","border","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","GET_ROBOTS_PENDING","GET_ROBOTS_SUCCESS","GET_ROBOTS_FAILED","connect","searchfield","searchRobots","fetchRobots","isPending","dispatch","handleSearch","event","text","target","value","payload","handleFetch","fetch","then","response","json","useEffect","filteredRobots","filter","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialSearchRobotsState","initialFetchRobotsState","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9b365674.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Card = (props) => {\r\n\r\n    const { name, email, id } = props;\r\n\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n            <img src={`https://robohash.org/test${id}?200*200`} alt=\"robots\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    \r\n\r\n    return (\r\n\r\n        <div>\r\n             { robots.map((robot, i) => <Card key={i} name={robot.name} email={robot.email} id={robot.id} />) }\r\n        </div>\r\n      \r\n        \r\n        \r\n    );\r\n}\r\n\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({onSearch}) => {\r\n\r\n    return (\r\n        <div >\r\n            <input onChange={onSearch} className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" name=\"searchbox\" />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst Scroll = (props) => {\r\n\r\n\r\n    return (\r\n        <div style={{overflow: \"scroll\", height: \"800px\", border: \"2px solid black\"}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.state.hasError) {\r\n            return <h1>Oooooops, that's bad</h1>\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n          \r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\nexport const GET_ROBOTS_PENDING = \"GET_ROBOTS_PENDING\"\r\nexport const GET_ROBOTS_SUCCESS = \"GET_ROBOTS_SUCCESS\"\r\nexport const GET_ROBOTS_FAILED = \"GET_ROBOTS_FAILED\"","import React, {useEffect} from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { connect } from \"react-redux\";\nimport { changeSearchField, getRobots } from '../actions';\n\n\n\nconst mapStateToProps = (state) => {\n\treturn {\n    searchfield: state.searchRobots.searchfield,\n    robots: state.fetchRobots.robots,\n    error: state.fetchRobots.error,\n    isPending: state.fetchRobots.isPending,\n\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n    handleSearch: (event) => dispatch(changeSearchField(event.target.value)),\n    handleFetch: () => dispatch(getRobots())\n\t};\n};\n\n\nfunction App(props) {\n\n \n \n  const { searchfield, handleSearch, robots, handleFetch} = props;\n  \n\n  useEffect(() => {\n\n    handleFetch();\n    \n  }, [handleFetch])\n\n  \n  \n\n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n  });\n\n\n  return (\n\t\t<div className=\"tc\">\n\t\t\t<h1 className=\"light-green f1\">ROBOTIC FRIENDS</h1>\n\t\t\t<SearchBox onSearch={handleSearch} />\n      <Scroll>\n        <ErrorBoundary>\n\t\t\t\t  <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n\t\t\t</Scroll>\n\t\t</div>\n\t);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    GET_ROBOTS_PENDING,\r\n    GET_ROBOTS_SUCCESS,\r\n    GET_ROBOTS_FAILED\r\n} from \"./constants\"\r\n\r\n\r\nexport const changeSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n}\r\n);\r\n\r\nexport const getRobots = () => (dispatch) => {\r\n\r\n    dispatch({ type: GET_ROBOTS_PENDING });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => response.json())\r\n        .then(robots => dispatch({ type: GET_ROBOTS_SUCCESS, payload: robots }))\r\n        .then(error => dispatch({ type: GET_ROBOTS_FAILED, payload: error }));\r\n    \r\n    \r\n    \r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    GET_ROBOTS_PENDING,\r\n    GET_ROBOTS_SUCCESS,\r\n    GET_ROBOTS_FAILED,\r\n} from \"./constants\"\r\n\r\nconst initialSearchRobotsState = {\r\n    searchfield: \"\"\r\n}\r\n\r\n\r\nexport const searchRobots= (state = initialSearchRobotsState, action = {}) => {\r\n    \r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchfield: action.payload });\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nconst initialFetchRobotsState = {\r\n\r\n    robots: [],\r\n    isPending: false,\r\n    error: \"\"\r\n\r\n}\r\n\r\n export const fetchRobots = (state = initialFetchRobotsState, action = {}) => {\r\n\r\n    switch (action.type) {\r\n        case GET_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        \r\n        case GET_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        \r\n        case GET_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { createLogger } from \"redux-logger\";\nimport ThunkMiddleware from \"redux-thunk\";\nimport { fetchRobots, searchRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, fetchRobots });\n\nconst store = createStore(\n\trootReducer,\n\tapplyMiddleware(ThunkMiddleware, logger),\n);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}